{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNOhk/oVAEnGsaPOt36ng46"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","source":["#Feature selection\n","Feature selection in machine learning is the process of choosing a subset of the most relevant and informative features (input variables) from a larger set of available features in your dataset. The goal of feature selection is to improve model performance, reduce overfitting, and enhance interpretability (the extent to which a cause and effect can be observed within a system)."],"metadata":{"id":"urgwwlI1Bg-0"}},{"cell_type":"markdown","source":["#Why Feature Selection\n","\n","- It can improve model generalization by removing irrelevant or redundant features, which can lead to simpler and more interpretable models.\n","- It can reduce the computational complexity of the model, making training and prediction faster.\n","- It can help prevent overfitting, where a model performs well on the training data but poorly on new, unseen data"],"metadata":{"id":"ToDfu9XpBoVI"}},{"cell_type":"markdown","source":["#Types of Feature Selection:\n","\n","**Filter Methods:**\n","\n","These methods evaluate the statistical characteristics of each feature independently of the machine learning model. Common techniques include correlation analysis, mutual information, and chi-squared tests.\n","\n","**Wrapper Methods:**\n","\n","These methods assess the quality of a subset of features by training and evaluating the machine learning model on different feature subsets. Techniques like forward selection, backward elimination, and recursive feature elimination (RFE) fall into this category.\n","\n","**Embedded Methods:**\n","\n","These methods incorporate feature selection as part of the model training process. For example, decision trees and L1-regularized linear models (Lasso) automatically select relevant features during training."],"metadata":{"id":"e4SZF2rfCESs"}},{"cell_type":"markdown","source":["#Challenges in Feature Selection\n","\n","**Curse of Dimensionality:**\n","\n"," In high-dimensional spaces, it becomes more challenging to select features effectively due to the exponentially increasing number of possible feature combinations.\n","\n","**Interactions:**\n","\n","Some features may be less informative individually but crucial when considered in combination with other features, making feature selection complex.\n","\n","**Data Imbalance:**\n","\n","Feature selection should account for class imbalance in classification problems to avoid biasing towards the majority class"],"metadata":{"id":"3N6E6GnQCglX"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n","---\n","\n","\n","\n","\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"ou-zZTGjDGTo"}},{"cell_type":"markdown","source":["#1. SelectKBest\n","This method is used to select the top k most relevant features from a dataset based on their statistical scores. It is part of the feature selection module in scikit-learn and is particularly useful when you want to reduce the dimensionality of your dataset by retaining only the most informative features.\n","\n","# Working\n","\n","**1. scoring functions**\n","\n","- For regression tasks: **f_regression**, which uses the F-statistic.\n","- For classification tasks: **chi2**, which uses the chi-squared statistic, and **f_classif**, which uses the F-statistic.\n","\n","**2.Ranking Features:**\n","\n","After scoring each feature, SelectKBest ranks them based on their scores in descending order. Features with higher scores are considered more relevant or informative.\n","\n","**3.Selecting the Top k Features:**\n","\n","Finally, you specify the value of k (the number of features you want to select) when creating the SelectKBest instance. The method then retains the top k features with the highest scores and discards the rest."],"metadata":{"id":"mnZRrTTSDK8k"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"6DI2SkCA5iYZ"}},{"cell_type":"code","source":["# Import necessary libraries\n","import numpy as np\n","import pandas as pd\n","from sklearn.datasets import load_breast_cancer\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"W-E0ZMBY5jmO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load the breast cancer dataset\n","data = load_breast_cancer()\n","df = pd.DataFrame(data.data, columns=data.feature_names)\n","df['target'] = data.target\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"jbbHL5eS9MIb","executionInfo":{"status":"ok","timestamp":1695510404435,"user_tz":-300,"elapsed":17,"user":{"displayName":"Ahmad Hassan","userId":"15315243366983422703"}},"outputId":"5c028252-adf8-4b10-a9cd-cca4540ed496"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n","0        17.99         10.38          122.80     1001.0          0.11840   \n","1        20.57         17.77          132.90     1326.0          0.08474   \n","2        19.69         21.25          130.00     1203.0          0.10960   \n","3        11.42         20.38           77.58      386.1          0.14250   \n","4        20.29         14.34          135.10     1297.0          0.10030   \n","\n","   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n","0           0.27760          0.3001              0.14710         0.2419   \n","1           0.07864          0.0869              0.07017         0.1812   \n","2           0.15990          0.1974              0.12790         0.2069   \n","3           0.28390          0.2414              0.10520         0.2597   \n","4           0.13280          0.1980              0.10430         0.1809   \n","\n","   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n","0                 0.07871  ...          17.33           184.60      2019.0   \n","1                 0.05667  ...          23.41           158.80      1956.0   \n","2                 0.05999  ...          25.53           152.50      1709.0   \n","3                 0.09744  ...          26.50            98.87       567.7   \n","4                 0.05883  ...          16.67           152.20      1575.0   \n","\n","   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n","0            0.1622             0.6656           0.7119                0.2654   \n","1            0.1238             0.1866           0.2416                0.1860   \n","2            0.1444             0.4245           0.4504                0.2430   \n","3            0.2098             0.8663           0.6869                0.2575   \n","4            0.1374             0.2050           0.4000                0.1625   \n","\n","   worst symmetry  worst fractal dimension  target  \n","0          0.4601                  0.11890       0  \n","1          0.2750                  0.08902       0  \n","2          0.3613                  0.08758       0  \n","3          0.6638                  0.17300       0  \n","4          0.2364                  0.07678       0  \n","\n","[5 rows x 31 columns]"],"text/html":["\n","  <div id=\"df-312b5f52-15cf-4098-b632-82f2bf8f0e50\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean radius</th>\n","      <th>mean texture</th>\n","      <th>mean perimeter</th>\n","      <th>mean area</th>\n","      <th>mean smoothness</th>\n","      <th>mean compactness</th>\n","      <th>mean concavity</th>\n","      <th>mean concave points</th>\n","      <th>mean symmetry</th>\n","      <th>mean fractal dimension</th>\n","      <th>...</th>\n","      <th>worst texture</th>\n","      <th>worst perimeter</th>\n","      <th>worst area</th>\n","      <th>worst smoothness</th>\n","      <th>worst compactness</th>\n","      <th>worst concavity</th>\n","      <th>worst concave points</th>\n","      <th>worst symmetry</th>\n","      <th>worst fractal dimension</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.3001</td>\n","      <td>0.14710</td>\n","      <td>0.2419</td>\n","      <td>0.07871</td>\n","      <td>...</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.1622</td>\n","      <td>0.6656</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.0869</td>\n","      <td>0.07017</td>\n","      <td>0.1812</td>\n","      <td>0.05667</td>\n","      <td>...</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.1238</td>\n","      <td>0.1866</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.1974</td>\n","      <td>0.12790</td>\n","      <td>0.2069</td>\n","      <td>0.05999</td>\n","      <td>...</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.1444</td>\n","      <td>0.4245</td>\n","      <td>0.4504</td>\n","      <td>0.2430</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.2414</td>\n","      <td>0.10520</td>\n","      <td>0.2597</td>\n","      <td>0.09744</td>\n","      <td>...</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.2098</td>\n","      <td>0.8663</td>\n","      <td>0.6869</td>\n","      <td>0.2575</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.1980</td>\n","      <td>0.10430</td>\n","      <td>0.1809</td>\n","      <td>0.05883</td>\n","      <td>...</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.1374</td>\n","      <td>0.2050</td>\n","      <td>0.4000</td>\n","      <td>0.1625</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 31 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-312b5f52-15cf-4098-b632-82f2bf8f0e50')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-312b5f52-15cf-4098-b632-82f2bf8f0e50 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-312b5f52-15cf-4098-b632-82f2bf8f0e50');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b1a6b284-80a0-46ba-b256-46ec3b9d2c79\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b1a6b284-80a0-46ba-b256-46ec3b9d2c79')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b1a6b284-80a0-46ba-b256-46ec3b9d2c79 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["df.shape"],"metadata":{"id":"6R8AdazJ9pPi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695510404436,"user_tz":-300,"elapsed":15,"user":{"displayName":"Ahmad Hassan","userId":"15315243366983422703"}},"outputId":"5ef1010f-bded-4a0e-99a5-a5259f1ed03a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 31)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["data = load_breast_cancer()\n","X = data.data\n","y = data.target\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"-4tlbDfSAwa5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Feature scaling (standardization)imp for this dataset\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"7EGg_m3dAxoz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Initialize and train various classification algorithms WITHOUT feature selection\n","classifiers = {\n","    \"Random Forest\": RandomForestClassifier(n_estimators=100, random_state=42),\n","    \"Gradient Boosting\": GradientBoostingClassifier(n_estimators=100, random_state=42),\n","    \"SVM\": SVC(kernel='linear', C=1)\n","}"],"metadata":{"id":"Vsmh6dgcA9jk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["results_no_feature_selection = {}"],"metadata":{"id":"yoriQdN5BEtZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for clf_name, clf in classifiers.items():\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","    accuracy = accuracy_score(y_test, y_pred)\n","    results_no_feature_selection[clf_name] = accuracy"],"metadata":{"id":"viQMLsTaBJFi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compare the accuracy scores without feature selection\n","print(\"Accuracy without feature selection:\")\n","for clf_name, accuracy in results_no_feature_selection.items():\n","    print(f\"{clf_name}: Accuracy = {accuracy:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M0TSoub5BzLz","executionInfo":{"status":"ok","timestamp":1695510407072,"user_tz":-300,"elapsed":11,"user":{"displayName":"Ahmad Hassan","userId":"15315243366983422703"}},"outputId":"e4142eef-db7b-4b63-dbac-40c42cb60a87"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy without feature selection:\n","Random Forest: Accuracy = 0.96\n","Gradient Boosting: Accuracy = 0.96\n","SVM: Accuracy = 0.96\n"]}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"td2etVmKBpCp"}},{"cell_type":"markdown","source":["#USING SelectKBest"],"metadata":{"id":"3ltgu8G0FDE4"}},{"cell_type":"code","source":["from sklearn.feature_selection import SelectKBest, chi2"],"metadata":{"id":"uS0Cx4_WBSZu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = np.abs(X_train)"],"metadata":{"id":"f4wFbyHLDE-N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Feature selection using SelectKBest\n","k_best = SelectKBest(score_func=chi2, k=15)  # Adjust 'k' as needed\n","X_train_new = k_best.fit_transform(X_train, y_train)\n","X_test_new = k_best.transform(X_test)"],"metadata":{"id":"j9qXivWJB-Y5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Initialize and train various classification algorithms WITH feature selection\n","classifiers_with_feature_selection = {\n","    \"Random Forest\": RandomForestClassifier(n_estimators=100, random_state=42),\n","    \"Gradient Boosting\": GradientBoostingClassifier(n_estimators=100, random_state=42),\n","    \"SVM\": SVC(kernel='linear', C=1)\n","}"],"metadata":{"id":"8JoBWW-VDxhW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["results_with_feature_selection = {}"],"metadata":{"id":"xs0MD6o0D5lC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for clf_name, clf in classifiers_with_feature_selection.items():\n","    clf.fit(X_train_new, y_train)\n","    y_pred = clf.predict(X_test_new)\n","    accuracy = accuracy_score(y_test, y_pred)\n","    results_with_feature_selection[clf_name] = accuracy"],"metadata":{"id":"A6YlANkHEFd2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compare the accuracy scores with feature selection\n","print(\"\\nAccuracy with feature selection:\")\n","for clf_name, accuracy in results_with_feature_selection.items():\n","    print(f\"{clf_name}: Accuracy = {accuracy:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iFvk820PEI_l","executionInfo":{"status":"ok","timestamp":1695510407648,"user_tz":-300,"elapsed":6,"user":{"displayName":"Ahmad Hassan","userId":"15315243366983422703"}},"outputId":"4a536f24-77ce-45b9-d8ac-4f5f827e9e20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Accuracy with feature selection:\n","Random Forest: Accuracy = 0.39\n","Gradient Boosting: Accuracy = 0.46\n","SVM: Accuracy = 0.76\n"]}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n","\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"Wt-lRuzlS8Zf"}},{"cell_type":"markdown","source":["# Recursive Feature Elimination (RFE)\n","Recursive Feature Elimination (RFE) is a feature selection technique used in machine learning to select a subset of relevant features from the original feature set. It is a backward selection method, which means it starts with all available features and iteratively removes the least important features until the desired number of features is reached. RFE is particularly useful when dealing with high-dimensional datasets or when you want to improve model performance and reduce overfitting by selecting only the most relevant features.\n","\n","Here's how Recursive Feature Elimination works:\n","\n","**Initialization**:\n","\n","Begin with all features from the dataset.\n","Train a machine learning model (e.g., a classifier or regressor) on the full feature set.\n","\n","**Feature Importance Ranking:**\n","\n","Calculate the importance or relevance of each feature based on the model's performance. Common methods include coefficients in linear models or feature importances in tree-based models.\n","Rank the features based on their importance scores.\n","\n","**Feature Elimination:**\n","\n","Remove the feature with the lowest importance score.\n","This removal aims to eliminate the least relevant feature, which is assumed to have the least impact on the model's performance.\n","\n","**Model Rebuilding:**\n","\n","Train the machine learning model again on the reduced feature set (all features except the one removed in the previous step).\n","\n","**Evaluation:**\n","\n","Evaluate the model's performance using a chosen evaluation metric (e.g., accuracy, mean squared error, etc.) on a validation dataset or through cross-validation.\n","\n","**Stopping Criteria:**\n","\n","Check if the desired number of features has been reached or if performance has plateaued.\n","If not, repeat steps 2-5 by ranking and eliminating the next least important feature.\n","\n","**Final Model:**\n","\n","The process continues until the desired number of features is selected or until performance significantly degrades.\n","The remaining features are considered the final selected features."],"metadata":{"id":"rxd-A00XS9pJ"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.datasets import load_iris\n","from sklearn.feature_selection import RFE\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"CYBpWraAUGn_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load the Iris dataset as an example\n","data = load_iris()\n","X = data.data\n","y = data.target\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"lue3qAlvUX7b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = LogisticRegression()"],"metadata":{"id":"mus9OSItUbgg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Initialize RFE with the model and number of features to select\n","num_features_to_select = 2\n","rfe = RFE(estimator=model, n_features_to_select=num_features_to_select)\n","\n","# Fit RFE to the training data\n","rfe.fit(X_train, y_train)\n","\n","# Get the mask of selected features (True for selected, False for not selected)\n","selected_features_mask = rfe.support_\n","\n","# Get the ranking of features (higher ranking means more important)\n","feature_ranking = rfe.ranking_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AaQpwkkwUvq7","executionInfo":{"status":"ok","timestamp":1695511079147,"user_tz":-300,"elapsed":366,"user":{"displayName":"Ahmad Hassan","userId":"15315243366983422703"}},"outputId":"6b740112-c5f9-4915-996d-4da819ee645a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}]},{"cell_type":"code","source":["# Print the selected features\n","selected_features = np.array(data.feature_names)[selected_features_mask]\n","print(\"Selected Features:\", selected_features)\n","\n","# Train the model using only the selected features\n","X_train_selected = X_train[:, selected_features_mask]\n","model.fit(X_train_selected, y_train)\n","\n","# Make predictions on the test set using the selected features\n","X_test_selected = X_test[:, selected_features_mask]\n","y_pred = model.predict(X_test_selected)\n","\n","# Calculate accuracy on the test set\n","accuracy = accuracy_score(y_test, y_pred)\n","print(\"Accuracy with selected features:\", accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e5z1RNqzVAb7","executionInfo":{"status":"ok","timestamp":1695511103475,"user_tz":-300,"elapsed":348,"user":{"displayName":"Ahmad Hassan","userId":"15315243366983422703"}},"outputId":"7a5dfc88-74db-45c9-aade-7e845a4b5abf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Selected Features: ['petal length (cm)' 'petal width (cm)']\n","Accuracy with selected features: 1.0\n"]}]}]}