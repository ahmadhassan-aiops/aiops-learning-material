




-----------------------------------------------

 minikube start
* minikube v1.35.0 on Centos 9
* Using the docker driver based on user configuration
* Using Docker driver with root privileges
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.46 ...
* Creating docker container (CPUs=2, Memory=2200MB) ...
* Preparing Kubernetes v1.32.0 on Docker 27.4.1 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default


[ahmad@client1 ~]$ kubectl get po -A
NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
kube-system   coredns-668d6bf9bc-25xvb           1/1     Running   0             73s
kube-system   etcd-minikube                      1/1     Running   0             79s
kube-system   kube-apiserver-minikube            1/1     Running   0             79s
kube-system   kube-controller-manager-minikube   1/1     Running   0             79s
kube-system   kube-proxy-m4gf2                   1/1     Running   0             74s
kube-system   kube-scheduler-minikube            1/1     Running   0             79s
kube-system   storage-provisioner                1/1     Running   1 (43s ago)   77s


-----------------------------------------------


kubectl describe po -n kube-system etcd-minikube
Name:                 etcd-minikube
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Node:                 minikube/192.168.49.2
Start Time:           Wed, 21 May 2025 01:00:54 +0500
Labels:               component=etcd
                      tier=control-plane
Annotations:          kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.49.2:2379
                      kubernetes.io/config.hash: 2b4b75c2a289008e0b381891e9683040
                      kubernetes.io/config.mirror: 2b4b75c2a289008e0b381891e9683040
                      kubernetes.io/config.seen: 2025-05-20T20:00:54.869016574Z
                      kubernetes.io/config.source: file
Status:               Running
SeccompProfile:       RuntimeDefault
IP:                   192.168.49.2
IPs:
  IP:           192.168.49.2
Controlled By:  Node/minikube
Containers:
  etcd:
    Container ID:  docker://619823abf81120133ac307f24b4c1d561f18f770daffcc1625daf55f437854ee
    Image:         registry.k8s.io/etcd:3.5.16-0
    Image ID:      docker-pullable://registry.k8s.io/etcd@sha256:c6a9d11cc5c04b114ccdef39a9265eeef818e3d02f5359be035ae784097fdec5
    Port:          <none>
    Host Port:     <none>
    Command:
      etcd
      --advertise-client-urls=https://192.168.49.2:2379
      --cert-file=/var/lib/minikube/certs/etcd/server.crt
      --client-cert-auth=true
      --data-dir=/var/lib/minikube/etcd
      --experimental-initial-corrupt-check=true
      --experimental-watch-progress-notify-interval=5s
      --initial-advertise-peer-urls=https://192.168.49.2:2380
      --initial-cluster=minikube=https://192.168.49.2:2380
      --key-file=/var/lib/minikube/certs/etcd/server.key
      --listen-client-urls=https://127.0.0.1:2379,https://192.168.49.2:2379
      --listen-metrics-urls=http://127.0.0.1:2381
      --listen-peer-urls=https://192.168.49.2:2380
      --name=minikube
      --peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt
      --peer-client-cert-auth=true
      --peer-key-file=/var/lib/minikube/certs/etcd/peer.key
      --peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt
      --proxy-refresh-interval=70000
      --snapshot-count=10000
      --trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt
    State:          Running
      Started:      Wed, 21 May 2025 01:00:50 +0500
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:        100m
      memory:     100Mi
    Liveness:     http-get http://127.0.0.1:2381/livez delay=10s timeout=15s period=10s #success=1 #failure=8
    Readiness:    http-get http://127.0.0.1:2381/readyz delay=0s timeout=15s period=1s #success=1 #failure=3
    Startup:      http-get http://127.0.0.1:2381/readyz delay=10s timeout=15s period=10s #success=1 #failure=24
    Environment:  <none>
    Mounts:
      /var/lib/minikube/certs/etcd from etcd-certs (rw)
      /var/lib/minikube/etcd from etcd-data (rw)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True
  Initialized                 True
  Ready                       True
  ContainersReady             True
  PodScheduled                True
Volumes:
  etcd-certs:
    Type:          HostPath (bare host directory volume)
    Path:          /var/lib/minikube/certs/etcd
    HostPathType:  DirectoryOrCreate
  etcd-data:
    Type:          HostPath (bare host directory volume)
    Path:          /var/lib/minikube/etcd
    HostPathType:  DirectoryOrCreate
QoS Class:         Burstable
Node-Selectors:    <none>
Tolerations:       :NoExecute op=Exists
Events:            <none>



-----------------------------------------------

kubectl exec -n kube-system etcd-minikube -- \
sh -c "ETCDCTL_API=3 etcdctl \
  --endpoints=https://192.168.49.2:2379 \
  --cacert=/var/lib/minikube/certs/etcd/ca.crt \
  --cert=/var/lib/minikube/certs/etcd/server.crt \
  --key=/var/lib/minikube/certs/etcd/server.key \
  get / --prefix --keys-only"


(this command uses etcdctl to list all keys stored in etcd with their prefixes using secure communication)

-----------------------------------------------

 kubectl exec -n kube-system etcd-minikube -- \
sh -c "ETCDCTL_API=3 etcdctl \
  --endpoints=https://192.168.49.2:2379 \
  --cacert=/var/lib/minikube/certs/etcd/ca.crt \
  --cert=/var/lib/minikube/certs/etcd/server.crt \
  --key=/var/lib/minikube/certs/etcd/server.key \
  get /registry/pods/ --prefix --keys-only"


/registry/pods/kube-system/coredns-668d6bf9bc-25xvb

/registry/pods/kube-system/etcd-minikube

/registry/pods/kube-system/kube-apiserver-minikube

/registry/pods/kube-system/kube-controller-manager-minikube

/registry/pods/kube-system/kube-proxy-m4gf2

/registry/pods/kube-system/kube-scheduler-minikube

/registry/pods/kube-system/storage-provisioner


-----------------------------------------------

kubectl exec -n kube-system etcd-minikube -- \
sh -c "ETCDCTL_API=3 etcdctl \
  --endpoints=https://192.168.49.2:2379 \
  --cacert=/var/lib/minikube/certs/etcd/ca.crt \
  --cert=/var/lib/minikube/certs/etcd/server.crt \
  --key=/var/lib/minikube/certs/etcd/server.key \
  get /registry/namespaces/ --prefix --keys-only"
/registry/namespaces/default

/registry/namespaces/kube-node-lease

/registry/namespaces/kube-public

/registry/namespaces/kube-system


-----------------------------------------------


[ahmad@client1 ~]$  kubectl exec -n kube-system etcd-minikube -- sh -c "ETCDCTL_API=3 etcdctl \
  --endpoints=https://192.168.49.2:2379 \
  --cacert=/var/lib/minikube/certs/etcd/ca.crt \
  --cert=/var/lib/minikube/certs/etcd/server.crt \
  --key=/var/lib/minikube/certs/etcd/server.key \
  put name ahmad"
OK
[ahmad@client1 ~]$  kubectl exec -n kube-system etcd-minikube -- sh -c "ETCDCTL_API=3 etcdctl \
  --endpoints=https://192.168.49.2:2379 \
  --cacert=/var/lib/minikube/certs/etcd/ca.crt \
  --cert=/var/lib/minikube/certs/etcd/server.crt \
  --key=/var/lib/minikube/certs/etcd/server.key \
  get name"
name
ahmad


-----------------------------------------------




