

minikube start
minikube addons enable ingress


(Its better to remove the kind cluster before making minikube)
kubectl config get-contexts
CURRENT   NAME                   CLUSTER                AUTHINFO               NAMESPACE
          kind-al-nafi-cluster   kind-al-nafi-cluster   kind-al-nafi-cluster
*         minikube               minikube               minikube               default


(If want to use kind again)
kubectl config use-context kind-kind


(We create app-space to deploy all our deployments here)
kubectl create ns app-space
namespace/app-space created

[ahmad@client1 ~]$ kubectl get ns
NAME              STATUS   AGE
app-space         Active   6s
default           Active   2m23s
ingress-nginx     Active   110s
kube-node-lease   Active   2m23s
kube-public       Active   2m23s
kube-system       Active   2m23s


kubectl get po -n ingress-nginx
NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-96hrl        0/1     Completed   0          6m49s
ingress-nginx-admission-patch-8dg58         0/1     Completed   2          6m49s
ingress-nginx-controller-56d7c84fd4-2rxwx   0/1     Running     0          6m49s



-----------------------------------------------



 kubectl get all -A
NAMESPACE       NAME                                            READY   STATUS      RESTARTS      AGE
ingress-nginx   pod/ingress-nginx-admission-create-96hrl        0/1     Completed   0             8m50s
ingress-nginx   pod/ingress-nginx-admission-patch-8dg58         0/1     Completed   2             8m50s
ingress-nginx   pod/ingress-nginx-controller-56d7c84fd4-2rxwx   1/1     Running     0             8m50s
kube-system     pod/coredns-668d6bf9bc-5sg8s                    1/1     Running     0             15m
kube-system     pod/etcd-minikube                               1/1     Running     0             15m
kube-system     pod/kube-apiserver-minikube                     1/1     Running     0             15m
kube-system     pod/kube-controller-manager-minikube            1/1     Running     0             15m
kube-system     pod/kube-proxy-nns9v                            1/1     Running     0             15m
kube-system     pod/kube-scheduler-minikube                     1/1     Running     0             15m
kube-system     pod/storage-provisioner                         1/1     Running     1 (15m ago)   15m

NAMESPACE       NAME                                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
default         service/kubernetes                           ClusterIP   10.96.0.1        <none>        443/TCP                      15m
ingress-nginx   service/ingress-nginx-controller             NodePort    10.106.85.85     <none>        80:30885/TCP,443:30095/TCP   8m50s
ingress-nginx   service/ingress-nginx-controller-admission   ClusterIP   10.104.165.122   <none>        443/TCP                      8m50s
kube-system     service/kube-dns                             ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP       15m

NAMESPACE     NAME                        DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE
kube-system   daemonset.apps/kube-proxy   1         1         1       1            1           kubernetes.io/os=linux   15m

NAMESPACE       NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
ingress-nginx   deployment.apps/ingress-nginx-controller   1/1     1            1           8m50s
kube-system     deployment.apps/coredns                    1/1     1            1           15m

NAMESPACE       NAME                                                  DESIRED   CURRENT   READY   AGE
ingress-nginx   replicaset.apps/ingress-nginx-controller-56d7c84fd4   1         1         1       8m50s
kube-system     replicaset.apps/coredns-668d6bf9bc                    1         1         1       15m

NAMESPACE       NAME                                       STATUS     COMPLETIONS   DURATION   AGE
ingress-nginx   job.batch/ingress-nginx-admission-create   Complete   1/1           95s        8m50s
ingress-nginx   job.batch/ingress-nginx-admission-patch    Complete   1/1           110s       8m50s


-----------------------------------------------


vim wear-deploy.yaml
[root@client1 ahmad]# cat wear-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-wear
  namespace: app-space
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp-wear
  template:
    metadata:
      labels:
        app: webapp-wear
    spec:
      containers:
      - image: kodekloud/ecommerce:apparels
        name: wear-webapp
        ports:
        - containerPort: 8080
          protocol: TCP



kubectl apply -f wear-deploy.yaml
deployment.apps/webapp-wear created


[ahmad@client1 ~]$ kubectl get deploy
No resources found in default namespace.


[ahmad@client1 ~]$ kubectl get deploy -n app-space
NAME          READY   UP-TO-DATE   AVAILABLE   AGE
webapp-wear   0/1     1            0           18s


kubectl get po -n app-space
NAME                           READY   STATUS    RESTARTS   AGE
webapp-wear-5bf97f7947-pvw2c   1/1     Running   0          67s


-----------------------------------------------

cat wear-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: wear-service
  namespace: app-space
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: webapp-wear
  type: ClusterIP



 kubectl apply -f wear-clusterip.yaml
service/wear-service created
[ahmad@client1 ~]$ kubectl get svc -n app-space
NAME           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
wear-service   ClusterIP   10.99.196.198   <none>        8080/TCP   9s


kubectl describe svc -n app-space wear-service
Name:                     wear-service
Namespace:                app-space
Labels:                   <none>
Annotations:              <none>
Selector:                 app=webapp-wear
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.99.196.198
IPs:                      10.99.196.198
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
Endpoints:                10.244.0.6:8080
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>





minikube ssh
docker@minikube:~$ curl 10.99.196.198:8080
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #2980b9;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547052428/apparels.jpg">

</div>


-----------------------------------------------


cat vedio-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-video
  namespace: app-space
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp-video
  template:
    metadata:
      labels:
        app: webapp-video
    spec:
      containers:
      - image: kodekloud/ecommerce:video
        name: simple-webapp
        ports:
        - containerPort: 8080
          protocol: TCP


[ahmad@client1 ~]$ kubectl apply -f vedio-deploy.yaml
deployment.apps/webapp-video created


[ahmad@client1 ~]$ kubectl get deploy -n app-space
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
webapp-video   1/1     1            1           15s
webapp-wear    1/1     1            1           9m9s


[ahmad@client1 ~]$ kubectl get po -n app-space
NAME                            READY   STATUS    RESTARTS   AGE
webapp-video-67f9967c79-4gqgz   1/1     Running   0          23s
webapp-wear-5bf97f7947-pvw2c    1/1     Running   0          9m17s
[ahmad@client1 ~]$


-----------------------------------------------

cat vedio-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: video-service
  namespace: app-space
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: webapp-video
  type: ClusterIP
[ahmad@client1 ~]$ kubectl apply -f vedio-clusterip.yaml
service/video-service created
[ahmad@client1 ~]$ kubectl get svc -n app-space
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
video-service   ClusterIP   10.97.146.213   <none>        8080/TCP   9s
wear-service    ClusterIP   10.99.196.198   <none>        8080/TCP   8m26s




 minikube ssh
docker@minikube:~$ curl 10.97.146.213:8080
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #30336b;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547052431/video.jpg">

</div>



-----------------------------------------------


cat food-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-food
  namespace: app-space
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp-food
  strategy: {}
  template:
    metadata:
      labels:
        app: webapp-food
    spec:
      containers:
      - image: kodekloud/ecommerce:food
        name: webapp-food
        ports:
        - containerPort: 8080
          protocol: TCP
[ahmad@client1 ~]$ kubectl apply -f food-deploy.yaml
deployment.apps/webapp-food created
[ahmad@client1 ~]$ kubectl get deploy -n app-space
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
webapp-food    1/1     1            1           14s
webapp-video   1/1     1            1           7m46s
webapp-wear    1/1     1            1           16m
[ahmad@client1 ~]$ kubectl get po -n app-space
NAME                            READY   STATUS    RESTARTS   AGE
webapp-food-6c4fb545cc-jbgh9    1/1     Running   0          20s
webapp-video-67f9967c79-4gqgz   1/1     Running   0          7m52s
webapp-wear-5bf97f7947-pvw2c    1/1     Running   0          16m


vim food-clusterip.yaml
[ahmad@client1 ~]$ kubectl apply -f food-clusterip.yaml
service/food-service created
[ahmad@client1 ~]$ cat food-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: food-service
  namespace: app-space
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: webapp-food
  type: ClusterIP


[ahmad@client1 ~]$ kubectl get svc -n app-space
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
food-service    ClusterIP   10.110.132.74   <none>        8080/TCP   10s
video-service   ClusterIP   10.97.146.213   <none>        8080/TCP   5m33s
wear-service    ClusterIP   10.99.196.198   <none>        8080/TCP   13m



 minikube ssh
docker@minikube:~$ curl 10.110.132.74:8080
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #30336b;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547258061/macaroon-PVQTF45-low.jpg">

</div>


-----------------------------------------------

(Till now we have three applications(pods and services) in app-space including wear,vedio and food)

[ahmad@client1 ~]$ kubectl get svc -n app-space
NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
food-service    ClusterIP   10.110.132.74   <none>        8080/TCP   10s
video-service   ClusterIP   10.97.146.213   <none>        8080/TCP   5m33s
wear-service    ClusterIP   10.99.196.198   <none>        8080/TCP   13m

-----------------------------------------------

cat default-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: default-backend
  namespace: app-space
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-backend
  template:
    metadata:
      labels:
        app: default-backend
    spec:
      containers:
      - image: kodekloud/ecommerce:404
        name: default-webapp
        ports:
        - containerPort: 8080
          protocol: TCP
[ahmad@client1 ~]$ kubectl apply -f default-deploy.yaml
deployment.apps/default-backend created
[ahmad@client1 ~]$ kubectl get po -n app-space
NAME                               READY   STATUS              RESTARTS   AGE
default-backend-77748d7d54-ngbz7   0/1     ContainerCreating   0          8s
webapp-food-6c4fb545cc-jbgh9       1/1     Running             0          8m39s
webapp-video-67f9967c79-4gqgz      1/1     Running             0          16m
webapp-wear-5bf97f7947-pvw2c       1/1     Running             0          25m




cat default-clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: default-backend-service
  namespace: app-space
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: default-backend
  type: ClusterIP
[ahmad@client1 ~]$ kubectl apply -f default-clusterip.yaml
service/default-backend-service created


[ahmad@client1 ~]$ kubectl get svc -n app-space
NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
default-backend-service   ClusterIP   10.104.71.137   <none>        80/TCP     8s
food-service              ClusterIP   10.110.132.74   <none>        8080/TCP   8m47s
video-service             ClusterIP   10.97.146.213   <none>        8080/TCP   14m
wear-service              ClusterIP   10.99.196.198   <none>        8080/TCP   22m




-----------------------------------------------


cat ingress-resource.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  name: ingress-wear-watch
  namespace: app-space
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: wear-service
            port:
              number: 8080
        path: /wear
        pathType: Prefix
      - backend:
          service:
            name: video-service
            port:
              number: 8080
        path: /watch
        pathType: Prefix
      - backend:
          service:
            name: food-service
            port:
              number: 8080
        path: /eat
        pathType: Prefix
  defaultBackend:
    service:
      name: default-backend-service
      port:
        number: 80


[ahmad@client1 ~]$ kubectl apply -f ingress-resource.yaml
ingress.networking.k8s.io/ingress-wear-watch created


[ahmad@client1 ~]$ kubectl get ingress
No resources found in default namespace.

kubectl get ingress -n app-space
NAME                 CLASS   HOSTS   ADDRESS        PORTS   AGE
ingress-wear-watch   nginx   *       192.168.49.2   80      59s



-----------------------------------------------


kubectl describe ingress -n app-space
Name:             ingress-wear-watch
Labels:           <none>
Namespace:        app-space
Address:          192.168.49.2
Ingress Class:    nginx
Default backend:  default-backend-service:80 (10.244.0.9:8080)
Rules:
  Host        Path  Backends
  ----        ----  --------
  *
              /wear    wear-service:8080 (10.244.0.6:8080)
              /watch   video-service:8080 (10.244.0.7:8080)
              /eat     food-service:8080 (10.244.0.8:8080)
Annotations:  nginx.ingress.kubernetes.io/rewrite-target: /
              nginx.ingress.kubernetes.io/ssl-redirect: false
Events:
  Type    Reason  Age                 From                      Message
  ----    ------  ----                ----                      -------
  Normal  Sync    55s (x2 over 102s)  nginx-ingress-controller  Scheduled for sync


-----------------------------------------------

 minikube ssh
docker@minikube:~$ curl 192.168.49.2/wear
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #2980b9;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547052428/apparels.jpg">

</div>

</body>docker@minikube:~$ curl 192.168.49.2/watch
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #30336b;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547052431/video.jpg">

</div>

</body>docker@minikube:~$ curl 192.168.49.2/eat
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #30336b;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547258061/macaroon-PVQTF45-low.jpg">

</div>

</body>docker@minikube:~$ curl 192.168.49.2/anythingelse
<html>
<head><title>404 Not Found</title></head>
<body>
<center><h1>404 Not Found</h1></center>
<hr><center>nginx</center>
</body>
</html>


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Now delete minikube cluster and create kind cluster!

 cat kind-config.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
  - role: worker
  - role: worker



kubectl create ns app-space
namespace/app-space created



kubectl get po -n app-space
NAME                               READY   STATUS    RESTARTS   AGE
default-backend-77748d7d54-q66xz   1/1     Running   0          103s
webapp-food-6c4fb545cc-6nm5t       1/1     Running   0          103s
webapp-video-67f9967c79-gcf99      1/1     Running   0          103s
webapp-wear-5bf97f7947-4k64l       1/1     Running   0          2m50s


kubectl get svc -n app-space
NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
default-backend-service   ClusterIP   10.96.156.142   <none>        80/TCP     108s
food-service              ClusterIP   10.96.5.195     <none>        8080/TCP   108s
video-service             ClusterIP   10.96.191.94    <none>        8080/TCP   108s
wear-service              ClusterIP   10.96.4.32      <none>        8080/TCP   2m55s




-----------------------------------------------

kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml


namespace/metallb-system created
customresourcedefinition.apiextensions.k8s.io/bfdprofiles.metallb.io created
customresourcedefinition.apiextensions.k8s.io/bgpadvertisements.metallb.io created
customresourcedefinition.apiextensions.k8s.io/bgppeers.metallb.io created
customresourcedefinition.apiextensions.k8s.io/communities.metallb.io created
customresourcedefinition.apiextensions.k8s.io/ipaddresspools.metallb.io created
customresourcedefinition.apiextensions.k8s.io/l2advertisements.metallb.io created
customresourcedefinition.apiextensions.k8s.io/servicel2statuses.metallb.io created
serviceaccount/controller created
serviceaccount/speaker created
role.rbac.authorization.k8s.io/controller created
role.rbac.authorization.k8s.io/pod-lister created
clusterrole.rbac.authorization.k8s.io/metallb-system:controller created
clusterrole.rbac.authorization.k8s.io/metallb-system:speaker created
rolebinding.rbac.authorization.k8s.io/controller created
rolebinding.rbac.authorization.k8s.io/pod-lister created
clusterrolebinding.rbac.authorization.k8s.io/metallb-system:controller created
clusterrolebinding.rbac.authorization.k8s.io/metallb-system:speaker created
configmap/metallb-excludel2 created
secret/metallb-webhook-cert created
service/metallb-webhook-service created
deployment.apps/controller created
daemonset.apps/speaker created
validatingwebhookconfiguration.admissionregistration.k8s.io/metallb-webhook-configuration created




kubectl get ns
NAME                 STATUS   AGE
app-space            Active   5m8s
default              Active   6m57s
kube-node-lease      Active   6m57s
kube-public          Active   6m57s
kube-system          Active   6m57s
local-path-storage   Active   6m53s
metallb-system       Active   22s



 kubectl -n metallb-system get all
NAME                             READY   STATUS              RESTARTS   AGE
pod/controller-bb5f47665-76t2r   0/1     ContainerCreating   0          52s
pod/speaker-76qsq                0/1     ContainerCreating   0          52s
pod/speaker-8987f                0/1     ContainerCreating   0          52s
pod/speaker-st7vt                0/1     ContainerCreating   0          52s

NAME                              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
service/metallb-webhook-service   ClusterIP   10.96.144.155   <none>        443/TCP   52s

NAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE
daemonset.apps/speaker   3         3         0       3            0           kubernetes.io/os=linux   52s

NAME                         READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/controller   0/1     1            0           52s

NAME                                   DESIRED   CURRENT   READY   AGE
replicaset.apps/controller-bb5f47665   1         1         0       52s




 kubectl get po -n metallb-system
NAME                         READY   STATUS    RESTARTS   AGE
controller-bb5f47665-76t2r   1/1     Running   0          8m51s
speaker-76qsq                1/1     Running   0          8m51s
speaker-8987f                1/1     Running   0          8m51s
speaker-st7vt                1/1     Running   0          8m51s



-----------------------------------------------

 cat metal-lb.yaml
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: first-pool
  namespace: metallb-system
spec:
  addresses:
  - 172.25.0.1-172.25.0.10
  - fc00:f853:0ccd:e799::/124


(Ip ranges are provides by seeing the ips of our nodes)


-----------------------------------------------

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.2/deploy/static/provider/baremetal/deploy.yaml
(It includes all the resources which ingress needs)

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.2/deploy/static/provider/baremetal/deploy.yaml
namespace/ingress-nginx created
serviceaccount/ingress-nginx created
serviceaccount/ingress-nginx-admission created
role.rbac.authorization.k8s.io/ingress-nginx created
role.rbac.authorization.k8s.io/ingress-nginx-admission created
clusterrole.rbac.authorization.k8s.io/ingress-nginx created
clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created
rolebinding.rbac.authorization.k8s.io/ingress-nginx created
rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created
clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created
clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created
configmap/ingress-nginx-controller created
service/ingress-nginx-controller created
service/ingress-nginx-controller-admission created
deployment.apps/ingress-nginx-controller created
job.batch/ingress-nginx-admission-create created
job.batch/ingress-nginx-admission-patch created
ingressclass.networking.k8s.io/nginx created
validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created


kubectl get ns
NAME                 STATUS   AGE
app-space            Active   19m
default              Active   21m
ingress-nginx        Active   69s
kube-node-lease      Active   21m
kube-public          Active   21m
kube-system          Active   21m
local-path-storage   Active   21m
metallb-system       Active   14m


ingress-nginx        Active   69s!!!!!!!!!!!!!!!!




kubectl -n ingress-nginx get all
NAME                                           READY   STATUS              RESTARTS   AGE
pod/ingress-nginx-admission-create-6jmrp       0/1     ContainerCreating   0          117s
pod/ingress-nginx-admission-patch-pbxrm        0/1     ContainerCreating   0          117s
pod/ingress-nginx-controller-69cb8948f-mvqkj   0/1     ContainerCreating   0          117s

NAME                                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
service/ingress-nginx-controller             NodePort    10.96.246.145   <none>        80:32603/TCP,443:32661/TCP   117s
service/ingress-nginx-controller-admission   ClusterIP   10.96.191.136   <none>        443/TCP                      117s

NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/ingress-nginx-controller   0/1     1            0           117s

NAME                                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/ingress-nginx-controller-69cb8948f   1         1         0       117s

NAME                                       STATUS    COMPLETIONS   DURATION   AGE
job.batch/ingress-nginx-admission-create   Running   0/1           117s       117s
job.batch/ingress-nginx-admission-patch    Running   0/1           117s       117s

-----------------------------------------------

(At the end we change nodeport to loadbalancer)


kubectl -n ingress-nginx edit svc ingress-nginx-controller
service/ingress-nginx-controller edited


  type: LoadBalancer
status:
  loadBalancer: {}



kubectl -n ingress-nginx get all
NAME                                           READY   STATUS              RESTARTS   AGE
pod/ingress-nginx-admission-create-6jmrp       0/1     Completed           0          7m57s
pod/ingress-nginx-admission-patch-pbxrm        0/1     Completed           2          7m57s
pod/ingress-nginx-controller-69cb8948f-mvqkj   0/1     ContainerCreating   0          7m57s

NAME                                         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
service/ingress-nginx-controller             LoadBalancer   10.96.246.145   172.25.0.1    80:32603/TCP,443:32661/TCP   7m57s
service/ingress-nginx-controller-admission   ClusterIP      10.96.191.136   <none>        443/TCP                      7m57s

NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/ingress-nginx-controller   0/1     1            0           7m57s

NAME                                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/ingress-nginx-controller-69cb8948f   1         1         0       7m57s

NAME                                       STATUS     COMPLETIONS   DURATION   AGE
job.batch/ingress-nginx-admission-create   Complete   1/1           3m46s      7m57s
job.batch/ingress-nginx-admission-patch    Complete   1/1           3m52s      7m57s





service/ingress-nginx-controller             LoadBalancer   10.96.246.145   172.25.0.1    80:32603/TCP,443:32661/TCP   7m57s (!!!!!!!!!!)




kubectl get po -n ingress-nginx
NAME                                       READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-6jmrp       0/1     Completed   0          16m
ingress-nginx-admission-patch-pbxrm        0/1     Completed   2          16m
ingress-nginx-controller-69cb8948f-mvqkj   1/1     Running     0          16m




-----------------------------------------------


kubectl -n ingress-nginx get ingressclasses
NAME    CONTROLLER             PARAMETERS   AGE
nginx   k8s.io/ingress-nginx   <none>       14m



cat ingress-resource.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  name: ingress-wear-watch
  namespace: app-space
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - backend:
          service:
            name: wear-service
            port:
              number: 8080
        path: /wear
        pathType: Prefix
      - backend:
          service:
            name: video-service
            port:
              number: 8080
        path: /watch
        pathType: Prefix
      - backend:
          service:
            name: food-service
            port:
              number: 8080
        path: /eat
        pathType: Prefix
  defaultBackend:
    service:
      name: default-backend-service
      port:
        number: 80


[root@client1 ahmad]# kubectl apply -f ingress-resource.yaml
ingress.networking.k8s.io/ingress-wear-watch created



(We just had to include the ingressClassName: nginx in kind cluster case)



kubectl -n app-space get ingress
NAME                 CLASS   HOSTS   ADDRESS   PORTS   AGE
ingress-wear-watch   nginx   *                 80      52s


[root@client1 ahmad]# kubectl -n app-space describe ingress
Name:             ingress-wear-watch
Labels:           <none>
Namespace:        app-space
Address:          172.25.0.3
Ingress Class:    nginx
Default backend:  default-backend-service:80 (10.244.2.3:8080)
Rules:
  Host        Path  Backends
  ----        ----  --------
  *
              /wear    wear-service:8080 (10.244.1.2:8080)
              /watch   video-service:8080 (10.244.2.2:8080)
              /eat     food-service:8080 (10.244.1.3:8080)
Annotations:  nginx.ingress.kubernetes.io/rewrite-target: /
              nginx.ingress.kubernetes.io/ssl-redirect: false
Events:
  Type    Reason  Age               From                      Message
  ----    ------  ----              ----                      -------
  Normal  Sync    9s (x2 over 62s)  nginx-ingress-controller  Scheduled for sync



-----------------------------------------------


kubectl -n ingress-nginx get svc
NAME                                 TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
ingress-nginx-controller             LoadBalancer   10.96.246.145   172.25.0.1    80:32603/TCP,443:32661/TCP   19m
ingress-nginx-controller-admission   ClusterIP      10.96.191.136   <none>        443/TCP                      19m

-----------------------------------------------


docker exec -it kind-worker bash
root@kind-worker:/# curl 172.25.0.1
<html>
<head><title>404 Not Found</title></head>
<body>
<center><h1>404 Not Found</h1></center>
<hr><center>nginx</center>
</body>
</html>
root@kind-worker:/# curl 172.25.0.1/wear
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #2980b9;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547052428/apparels.jpg">

</div>

</body>root@kind-worker:/# curl 172.25.0.1/vedio
<html>
<head><title>404 Not Found</title></head>
<body>
<center><h1>404 Not Found</h1></center>
<hr><center>nginx</center>
</body>
</html>
root@kind-worker:/# curl 172.25.0.1/eat
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #30336b;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547258061/macaroon-PVQTF45-low.jpg">

</div>


-----------------------------------------------

kubectl port-forward -n ingress-nginx services/ingress-nginx-controller 8080:80
Forwarding from 127.0.0.1:8080 -> 80
Forwarding from [::1]:8080 -> 80
Handling connection for 8080
Handling connection for 8080


curl 127.0.0.1:8080
<html>
<head><title>404 Not Found</title></head>
<body>
<center><h1>404 Not Found</h1></center>
<hr><center>nginx</center>
</body>
</html>
[root@client1 ahmad]# curl 127.0.0.1:8080/wear
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #2980b9;">

<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">
    <img src="https://res.cloudinary.com/cloudusthad/image/upload/v1547052428/apparels.jpg">

</div>

-----------------------------------------------
-----------------------------------------------



