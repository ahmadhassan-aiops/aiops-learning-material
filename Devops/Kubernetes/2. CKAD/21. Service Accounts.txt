

Service Accounts:



1. What is a Service Account in Kubernetes?
A Service Account (SA) in Kubernetes is used by pods to communicate securely with the Kubernetes API or other services. Unlike user accounts, 
which are for humans, service accounts are for apps running inside the cluster. Each pod gets associated with a service account, 
which provides the pod with an identity so it can access cluster resources.

2. What’s with the Token and the Secret?
When a service account is created, Kubernetes used to automatically generate a secret that included a token (a JWT) for authenticating the pod 
to the Kubernetes API. This token was stored in a secret and mounted as a file inside the pod. The app inside the pod could then use this token 
to prove its identity to the API.

3. How Pods Use the Token Inside the Cluster
If a pod needs to call the Kubernetes API (e.g., to list pods), it can read the token from the mounted volume 
(usually under /var/run/secrets/kubernetes.io/serviceaccount/token) and use it in an API request. Kubernetes knows which SA the pod belongs to and 
uses the token to authorize the request based on RBAC rules.

4. What if I Need to Access from Outside the Cluster?
If an external tool or service (outside the cluster) needs to access the Kubernetes API using a service account, 
you must extract the token from the secret manually and pass it with your API request. Be careful with this since it exposes security risks, 
especially if the token is not rotated or secured.

5. Why Does Kubernetes Create a Default Service Account?
Every namespace in Kubernetes has a default service account. If you don't specify any SA for a pod, Kubernetes will use this one. Yes, 
the default service account has limited permissions—it typically can't do much unless you assign it extra permissions through RBAC. 
This helps keep things secure by default.

6. What Changed in Kubernetes v1.22 and v1.24?
Before v1.22, service account tokens were automatically created and mounted to pods. Since v1.22 and especially in v1.24, 
Kubernetes stopped auto-generating long-lived tokens for new service accounts. Now, you need to manually create tokens using a Secret of type 
kubernetes.io/service-account-token. This change improves security and scalability, reducing risks of leaked or abused tokens.

7. Can I Still Create a Service Account with Unlimited Expiry?
Yes, though not recommended, you can still manually create a long-lived token by setting the expirationSeconds to a very high value (e.g., years) 
when requesting a token using the TokenRequest API. However, doing so is discouraged because it weakens security—tokens should be short-lived and rotated.

8. What is jwt.io?
jwt.io is a website where you can paste and decode a JWT (JSON Web Token) to see its contents, such as issuer, expiry, and claims. 
Kubernetes SA tokens are JWTs, so you can use this site to inspect the token structure and better understand what information Kubernetes encodes in it.


-------------------------------------------------------------------------------------------------

kubectl get serviceaccount
NAME      SECRETS   AGE
default   0         6d20h

kubectl get sa
NAME      SECRETS   AGE
default   0         6d20h


-----------------------------------------------

vim my-dashboard.yaml
[root@client1 ahmad]# cat my-dashboard.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-dashboard
  labels:
    app: dashboard
spec:
  containers:
  - name: web-dashboard
    image: gcr.io/kodekloud/customimage/my-kubernetes-dashboard
    ports:
    - containerPort: 8080
      protocol: TCP
    env:
    - name: PYTHONUNBUFFERED
      value: "1"



[root@client1 ahmad]# kubectl apply -f my-dashboard.yaml
pod/my-dashboard created
[root@client1 ahmad]# kubectl get po
NAME           READY   STATUS              RESTARTS   AGE
my-dashboard   0/1     ContainerCreating   0          5s
[root@client1 ahmad]# kubectl get po
NAME           READY   STATUS              RESTARTS   AGE
my-dashboard   0/1     ContainerCreating   0          13s



[root@client1 ahmad]# cat my-dashboard-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: dashboard-svc
  labels:
    app: dashboard
spec:
  selector:
    app: dashboard
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP



[root@client1 ahmad]# vim my-dashboard-svc.yaml
[root@client1 ahmad]# kubectl apply -f my-dashboard-svc.yaml
service/dashboard-svc created


[root@client1 ahmad]# kubectl get svc
NAME            TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE
dashboard-svc   NodePort    10.96.27.12   <none>        8080:31069/TCP   6s
kubernetes      ClusterIP   10.96.0.1     <none>        443/TCP          5d19h
[root@client1 ahmad]# kubectl get po
NAME           READY   STATUS    RESTARTS   AGE
my-dashboard   1/1     Running   0          8m23s


-----------------------------------------------

kubectl describe svc dashboard-svc
Name:                     dashboard-svc
Namespace:                default
Labels:                   app=dashboard
Annotations:              <none>
Selector:                 app=dashboard
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.27.12
IPs:                      10.96.27.12
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  31069/TCP
Endpoints:                10.244.1.2:8080
Session Affinity:         None
External Traffic Policy:  Cluster
Internal Traffic Policy:  Cluster
Events:                   <none>



-----------------------------------------------

kubectl port-forward pod/my-dashboard 5555:8080
Forwarding from 127.0.0.1:5555 -> 8080
Forwarding from [::1]:5555 -> 8080
Handling connection for 5555

127.0.0.1:5555

This service donot have permission yet becasue we donot have serviceaccount based access!


kubectl describe sa default
Name:                default
Namespace:           default
Labels:              <none>
Annotations:         <none>
Image pull secrets:  <none>
Mountable secrets:   <none>
Tokens:              <none>
Events:              <none>


we donot have any tokens
-----------------------------------------------

 kubectl describe po my-dashboard
Name:             my-dashboard
Namespace:        default
Priority:         0
Service Account:  default
Node:             my-cluster-worker/172.25.0.2
Start Time:       Tue, 06 May 2025 17:04:20 +0500
Labels:           app=dashboard
Annotations:      <none>
Status:           Running
IP:               10.244.1.2
IPs:
  IP:  10.244.1.2
Containers:
  web-dashboard:
    Container ID:   containerd://dd6fb32099ecffa39fdcf63d2e13266c1f98a1ec2561671df64267ca18ccce69
    Image:          gcr.io/kodekloud/customimage/my-kubernetes-dashboard
    Image ID:       gcr.io/kodekloud/customimage/my-kubernetes-dashboard@sha256:7d70abe342b13ff1c4242dc83271ad73e4eedb04e2be0dd30ae7ac8852193069
    Port:           8080/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Tue, 06 May 2025 17:05:12 +0500
    Ready:          True
    Restart Count:  0
    Environment:
      PYTHONUNBUFFERED:  1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-pz68r (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True
  Initialized                 True
  Ready                       True
  ContainersReady             True
  PodScheduled                True
Volumes:
  kube-api-access-pz68r:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    Optional:                false
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  19m   default-scheduler  Successfully assigned default/my-dashboard to my-cluster-worker
  Normal  Pulling    19m   kubelet            Pulling image "gcr.io/kodekloud/customimage/my-kubernetes-dashboard"
  Normal  Pulled     18m   kubelet            Successfully pulled image "gcr.io/kodekloud/customimage/my-kubernetes-dashboard" in 51.891s (51.891s including waiting). Image size: 31659887 bytes.
  Normal  Created    18m   kubelet            Created container: web-dashboard
  Normal  Started    18m   kubelet            Started container web-dashboard



(We have default service account that is mounted)



-----------------------------------------------

 kubectl exec -it my-dashboard -- ls /var/run/secrets/kubernetes.io/serviceaccount
ca.crt     namespace  token


 kubectl exec -it my-dashboard -- cat /var/run/secrets/kubernetes.io/serviceaccount/token
eyJhbGciOiJSUzI1NiIsImtpZCI6IlV0Z0ZocmM4WFhyUW9TV3Z3NVpBWkRmVGxEbEowdWhkcG9EckRNbFlmVlkifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzc4MDY5MDYwLCJpYXQiOjE3NDY1MzMwNjAsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwianRpIjoiM2NjY2M3MDAtMWI5Mi00MTI5LTgxMGYtMmQxYjJhODNhY2RkIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0Iiwibm9kZSI6eyJuYW1lIjoibXktY2x1c3Rlci13b3JrZXIiLCJ1aWQiOiI4NTY3ZTMyMy1iMTQxLTRhNWYtYTM3Ny04MWYxY2EyMmFhZDAifSwicG9kIjp7Im5hbWUiOiJteS1kYXNoYm9hcmQiLCJ1aWQiOiJjMDYzYmQwMS04MjhhLTRmMGYtODM4Ni01NTgyZTA5NmY2YTYifSwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImRlZmF1bHQiLCJ1aWQiOiJjMDNjZGFiNi1hMzQwLTQxMDgtODNkZS1jMzJlZGYyNzVlNjcifSwid2FybmFmdGVyIjoxNzQ2NTM2NjY3fSwibmJmIjoxNzQ2NTMzMDYwLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6ZGVmYXVsdDpkZWZhdWx0In0.M2GmYtZl9BMbnwdu6es6zeTzKij_cNmtXN5yyHjQRhonO4XIW6ciLClKH19DTB0OjxkotOkWEQUk-Uynvb4LjtImD2Tu8l8jfVR3E31XWCOWfGWUA-myP5CFc5FiDT3OcRZ2VkEhSNTpIrcTj2eeDsnBnFmPbDowyGQEMsU9WDFH-FTOedqWMD8M-CNs0UpcY4t9q03cR5zi4hT3sLoWpPK3mT3TbAU45EPHOcgpE8eOwVmMlTm1Xt-1Qv1ggPC4vSSB48hJSfQiMlNcPFuzWWaePDCORSv3ExK3VL3v2fj60kk747W64JKOKwO2S4-Uh5zRSRQbS2oJhXc-bGQ_LA

(All default limited based communication is happening because of this token)
-----------------------------------------------

kubectl create sa dashboard-sa
serviceaccount/dashboard-sa created
[root@client1 ahmad]# kubectl get sa
NAME           SECRETS   AGE
dashboard-sa   0         6s
default        0         6d20h

(We are creating our own sa for some enhanced permissions)

-----------------------------------------------

vim dashboard-role.yaml
[root@client1 ahmad]# cat dashboard-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources:
  - pods
  verbs:
  - get
  - watch
  - list

[root@client1 ahmad]# kubectl apply -f dashboard-role.yaml
role.rbac.authorization.k8s.io/pod-reader created
[root@client1 ahmad]# kubectl get role
NAME         CREATED AT
pod-reader   2025-05-06T12:31:04Z



-----------------------------------------------

vim dashboard-rbac.yaml
[root@client1 ahmad]# cat dashboard-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: dashboard-sa # Name is case sensitive
  namespace: default
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole
  apiGroup: rbac.authorization.k8s.io
[root@client1 ahmad]# kubectl apply -f dashboard-rbac.yaml
rolebinding.rbac.authorization.k8s.io/read-pods created
[root@client1 ahmad]# kubectl get rolebindings
NAME        ROLE              AGE
read-pods   Role/pod-reader   12s



-----------------------------------------------

kubectl create token dashboard-sa

eyJhbGciOiJSUzI1NiIsImtpZCI6IlV0Z0ZocmM4WFhyUW9TV3Z3NVpBWkRmVGxEbEowdWhkcG9EckRNbFlmVlkifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzQ2NTM4NTYzLCJpYXQiOjE3NDY1MzQ5NjMsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwianRpIjoiMTJjNGE0YzgtNThhYS00MmYyLTllZWMtYzhiNmNkZmRkODY2Iiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0Iiwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImRhc2hib2FyZC1zYSIsInVpZCI6Ijk2ZGEyY2YwLWY4YjUtNDY1NS05ZjkwLTQwMjU2OWYxNDJiMSJ9fSwibmJmIjoxNzQ2NTM0OTYzLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6ZGVmYXVsdDpkYXNoYm9hcmQtc2EifQ.EzokrDWPDWQJdwqtS7-kO_itT6nKZ7ULHdjLWUF2UlUT_qpyTk6Ifyb21bkhHoUdpkbVF2NzG28dKRhZH8bIiJmGcKcSsi0B_3CIhcYTiqXSWRAqEy8YUaHOZoe1hvaZxDGYUv9kfrV7izgEutMbv7OEMNhrnUb5P_RlF0A49oUqPJnPsTN4gingAPtOZv2EPqZcSwGqZ0ioZucUIbIVc3ob0lpkEq-i_NcKarEMmRpRCrYDQtlSJnMDFprgKnWBSN4opM-LPw6ahoq1dzQ0x6O1tROud0AgEv-ptAz_MIOLIHGmu6EuJvyMJ1DMB887HcpGUDzcVoPhDibDJKqAgA


127.0.0.1:5555

(Provide this token!)


Now all pods info will be shown including new ones

kubectl run new-pod --image nginx

-----------------------------------------------



-----------------------------------------------



-----------------------------------------------



-----------------------------------------------



-----------------------------------------------



-----------------------------------------------



-----------------------------------------------
