



 kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   8d
[root@client1 ahmad]#
[root@client1 ahmad]# kubectl describe svc kubernetes
Name:                     kubernetes
Namespace:                default
Labels:                   component=apiserver
                          provider=kubernetes
Annotations:              <none>
Selector:                 <none>
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.0.1
IPs:                      10.96.0.1
Port:                     https  443/TCP
TargetPort:               6443/TCP
Endpoints:                172.25.0.3:6443
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


-----------------------------------------------


 cat deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-frontend
  labels:
    app: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: webapp
        image: kodekloud/simple-webapp:red
        ports:
        - containerPort: 8080





 kubectl apply -f deploy.yaml
deployment.apps/webapp-frontend created


[root@client1 ahmad]# kubectl get deploy
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
webapp-frontend   0/3     3            0           6s


[root@client1 ahmad]# kubectl get po
NAME                               READY   STATUS              RESTARTS   AGE
webapp-frontend-5c577fb687-gvkqd   0/1     ContainerCreating   0          17s
webapp-frontend-5c577fb687-jxtxk   0/1     ContainerCreating   0          17s
webapp-frontend-5c577fb687-sp5nh   0/1     ContainerCreating   0          17s

-----------------------------------------------

kubectl get po -o wide
NAME                               READY   STATUS    RESTARTS   AGE     IP           NODE           NOMINATED NODE   READINESS GATES
webapp-frontend-5c577fb687-gvkqd   1/1     Running   0          3m45s   10.244.2.3   kind-worker2   <none>           <none>
webapp-frontend-5c577fb687-jxtxk   1/1     Running   0          3m45s   10.244.2.2   kind-worker2   <none>           <none>
webapp-frontend-5c577fb687-sp5nh   1/1     Running   0          3m45s   10.244.1.3   kind-worker    <none>           <none>



-----------------------------------------------


cat clusterip-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: webap-clusterip-service
spec:
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP


-----------------------------------------------

 kubectl apply -f clusterip-svc.yaml
service/webap-clusterip-service created
[root@client1 ahmad]# kubectl get svc
NAME                      TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE
kubernetes                ClusterIP   10.96.0.1     <none>        443/TCP    8d
webap-clusterip-service   ClusterIP   10.96.43.93   <none>        8080/TCP   6s
[root@client1 ahmad]# kubectl describe svc webap-clusterip-service
Name:                     webap-clusterip-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=frontend
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.43.93
IPs:                      10.96.43.93
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
Endpoints:                10.244.2.2:8080,10.244.1.3:8080,10.244.2.3:8080
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


-----------------------------------------------


 kubectl get nodes -o wide
NAME                 STATUS   ROLES           AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                         KERNEL-VERSION          CONTAINER-RUNTIME
kind-control-plane   Ready    control-plane   8d    v1.32.2   172.25.0.3    <none>        Debian GNU/Linux 12 (bookworm)   5.14.0-542.el9.x86_64   containerd://2.0.2
kind-worker          Ready    <none>          8d    v1.32.2   172.25.0.4    <none>        Debian GNU/Linux 12 (bookworm)   5.14.0-542.el9.x86_64   containerd://2.0.2
kind-worker2         Ready    <none>          8d    v1.32.2   172.25.0.2    <none>        Debian GNU/Linux 12 (bookworm)   5.14.0-542.el9.x86_64   containerd://2.0.2




[root@client1 ahmad]# kubectl get po -o wide
NAME                               READY   STATUS    RESTARTS   AGE   IP           NODE           NOMINATED NODE   READINESS GATES
webapp-frontend-5c577fb687-gvkqd   1/1     Running   0          11m   10.244.2.3   kind-worker2   <none>           <none>
webapp-frontend-5c577fb687-jxtxk   1/1     Running   0          11m   10.244.2.2   kind-worker2   <none>           <none>
webapp-frontend-5c577fb687-sp5nh   1/1     Running   0          11m   10.244.1.3   kind-worker    <none>           <none>



-----------------------------------------------

 docker exec -it kind-control-plane bash
root@kind-control-plane:/#
root@kind-control-plane:/# curl 10.96.43.93:8080
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #e74c3c;"></body>
<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">

  <h1>Hello from webapp-frontend-5c577fb687-sp5nh!</h1>


-----------------------------------------------

vim nodeport-svc.yaml
[root@client1 ahmad]# cat nodeport-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: webap-nodeport-service
spec:
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    nodePort: 30080
  type: NodePort
[root@client1 ahmad]# kubectl apply -f nodeport-svc.yaml
service/webap-nodeport-service created
[root@client1 ahmad]# kubectl describe svc webap-nodeport-service
Name:                     webap-nodeport-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=frontend
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.194.202
IPs:                      10.96.194.202
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  30080/TCP
Endpoints:                10.244.2.3:8080,10.244.2.2:8080,10.244.1.3:8080
Session Affinity:         None
External Traffic Policy:  Cluster
Internal Traffic Policy:  Cluster
Events:                   <none>


-----------------------------------------------

 curl 172.25.0.3:30080
<!doctype html>
<title>Hello from Flask</title>
<body style="background: #e74c3c;"></body>
<div style="color: #e4e4e4;
    text-align:  center;
    height: 90px;
    vertical-align:  middle;">

  <h1>Hello from webapp-frontend-5c577fb687-jxtxk!</h1>




-----------------------------------------------


172.25.0.3:30080

(Can also apply this on web server as well)

-----------------------------------------------


