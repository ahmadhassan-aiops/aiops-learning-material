


https://developer.hashicorp.com/terraform/language/syntax/configuration


=====================================================================================

				(Use credentials as earlier)

**Terraform to prompt the user for values** instead of putting defaults or hardcoding. That means:

* Define variables in `variables.tf` without `default`.
* Terraform will **ask at runtime** when you run `terraform apply`.
* In the config, you just reference them with `${var.name}` (or simply `var.name`).



### **providers.tf**

```hcl
provider "aws" {
  region     = var.aws_region
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
}
```

---

### **variables.tf**

```hcl
variable "aws_region" {
  description = "AWS region"
  type        = string
}

variable "aws_access_key" {
  description = "AWS Access Key"
  type        = string
}

variable "aws_secret_key" {
  description = "AWS Secret Key"
  type        = string
}

variable "ami_id" {
  description = "AMI ID"
  type        = string
}

variable "instance_type" {
  description = "EC2 instance type"
  type        = string
}
```

---

### **createinstance.tf**

```hcl
resource "aws_instance" "my_instance" {
  ami           = var.ami_id
  instance_type = var.instance_type

  tags = {
    Name = "PromptedInstance"
  }
}
```

---

### How it works

When you run:

```bash
terraform init
terraform apply
```

Terraform will **prompt you** like this:

```
var.aws_region
  Enter a value: us-east-1

var.aws_access_key
  Enter a value: AKIARRRVNJR

var.aws_secret_key
  Enter a value: 2HB7LzzjYT4Zc0CvFQKdjAD+Uj

var.ami_id
  Enter a value: ami-0bbdd8c17ed981ef9

var.instance_type
  Enter a value: t2.micro
```



=====================================================================================






